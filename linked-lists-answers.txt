Exercises
#1 What are some pros and cons of using linked lists instead of arrays?
A large benefit of a linked list is that the data is dynamically stored. Therefore, if the data was comprised, the data of a linked list is not stored right next to each other in memory, unlike arrays. A drawback of using a linked list is that it is not easy to access data in. You will always have to linearly search the array to access data, even if you know what position the data is in.

#2 Come up with a real world example of a linked list.
I think of the game Carmen San Diego. You get some information about where the suspect is going next, you follow them there, get more information on where they are going next, you follow them to that next location, and so on and so on until you get the suspect. You can't go straight to what the suspect is, you have to get the clues about their location along the way to reach them.


Programming Questions
#1 This implementation will not work because it it will always drop the rest of the linked list except the head. If the head is already pointing to a node, but then it is replaced on the line 'SET current.next to node' the whole rest of the linked list will not be accessible anymore since nothing is referencing to it

class Node{
  constructor(value){
    this.value = value;
    this.next = null;
  }
}

class LinkedList{
  constructor(){
    this.size = 0;
    this.head = null;
    this.current = null;
  }
  push(element){
    let node = new Node(element);
    
    if(this.head === null){
      this.head = node;
      this.current = node;
    }
    else{
      this.current.next = node;
      this.current = node;
    }
    this.size += 1;
  }
  
}


#2 I did this and the next one in Python because I am more comfortable with it and was struggling to implement "pointers" in Javascript. Once I finished, I realized I probably could have figured it out in Javascript. :)

class Node:
    def __init__(self, val):
        self.val = val
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.curr = None
        self.length = 0
    def pushVal(self,val):
        node = Node(val)
        if(self.head == None):
            self.head = node
            self.curr = node
        else:
            self.curr.next = node
            self.curr = node
        self.length += 1
    def printLinkedList(self):
        ptr = self.head
        while ptr != None:
            print(ptr.val)
            ptr = ptr.next

def removeDups(linked):
    ##ptr = Node(0)
    ptr = linked.head
    values = [linked.head.val]
    while ptr.next != None:
        if ptr.next.val in values:
            ptr.next = ptr.next.next
            linked.length -= 1
        else:
            values.append(ptr.next.val)
            ptr = ptr.next


#3
class Node:
    def __init__(self, val):
        self.val = val
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.curr = None
        self.length = 0
    def pushVal(self,val):
        node = Node(val)
        if(self.head == None):
            self.head = node
            self.curr = node
        else:
            self.curr.next = node
            self.curr = node
        self.length += 1
    def printLinkedList(self):
        ptr = self.head
        while ptr != None:
            print(ptr.val)
            ptr = ptr.next

def reverse(linked):
    ##ptr = Node(0)
    ptr = linked.head
    prevptr = None
    nextptr = linked.head.next

    #add each value to stack
    while ptr != None:
        ptr.next = prevptr
        #change current node's next to prevptr
        prevptr = ptr
        ptr = nextptr
        if nextptr != None:
            nextptr = ptr.next

    linked.head = prevptr
